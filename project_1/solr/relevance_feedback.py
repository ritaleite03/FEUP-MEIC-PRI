import numpy as np

def rocchio(query_vector: list[float], relevant_vectors: list[list[float]], non_relevant_vectors: list[list[float]], alpha: float = 1, beta: float = 0.75, gamma: float = 0.15):
    """
    Implements the Rocchio relevance feedback algorithm for updating a query vector.

    Parameters:
    ----------
    query_vector : list[float]
        The query vector used in the search, typically generated by a language model.
    relevant_vectors : list[list[float]]
        A list of vectors representing relevant documents.
    non_relevant_vectors : list[list[float]]
        A list of vectors representing non-relevant documents.
    alpha : float, optional
        The weight applied to the original query vector (default is 1).
    beta : float, optional
        The weight applied to the sum of relevant document vectors (default is 0.75).
    gamma : float, optional
        The weight applied to the sum of non-relevant document vectors (default is 0.15).

    Returns:
    -------
    list[float]
        The updated query vector after applying relevance feedback.
    """

    # Qf = α*Qi + β*Σ(pos)/|pos| – γ*Σ(neg)/|neg|

    query_vector = np.array(query_vector)
    relevant_vectors = list(map(np.array, relevant_vectors))
    non_relevant_vectors = list(map(np.array, non_relevant_vectors))

    weighted_query_vector = alpha * query_vector

    if relevant_vectors:
        weighted_relevant_vectors = (beta / len(relevant_vectors)) * sum(relevant_vectors)
    else:
        weighted_relevant_vectors = 0


    if non_relevant_vectors:
        weighted_non_relevant_vectors = (gamma / len(non_relevant_vectors)) * sum(non_relevant_vectors)
    else:
        weighted_non_relevant_vectors = 0
    
    new_query_vector = weighted_query_vector + weighted_relevant_vectors - weighted_non_relevant_vectors
    

    return new_query_vector


def main():
    solr_uri = "http://localhost:8983/solr"
    collection = "diseases_semantic"

    rocchio(query_vector=[1, 2, 3], relevant_vectors=[[1, 2, 3], [4, 5, 6]], non_relevant_vectors=[[7, 8, 9], [10, 11, 12]])
    

if __name__ == "__main__":
    main()